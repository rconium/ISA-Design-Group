############################################################## PART A
0x01
0x11
0x11	# initial seed 3
0x04
0x24	# tempS = seed
0x09	# address counter
0x19
0x19
0x19
0x19
0x19
0x19
0x19	#  $2 = 8, point initial memory address to M[8]
0x0C
0x3B	# store address counter to M[0]
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19	# numS = 16
0x1D
0x3B	# store numS to M[1]
0x00
0xCC	# load address counter into $3
0x70	# store the next pc value into register uno
0x37	# store value $1 into mem address
0x09
0x19
0x19
0x19    # $2 = 4
0xCE    # load sumS into $3
0x2D 	# sumS = sumS + seed
0x3E	# store sumS into M[4]
0x45	# sq = $1 x $1; $1 = 8 most significant bits; $0 = 8 least significant bits
0x54	# drops the 4 LSB of $1 and 4 MSB of $0, merge into $1
0x00
0x11
0xC8	# load numS into $2
0x1B	# numS--
0x38	# store numS into M[1]
0x00
0xCC    # load address counter into $3
0x1D    # increment address counter by 1
0x3C	# store address counter into M[0]
0x68    # if $2 != 0, jump to register uno value → loop
0x09
0x19
0x19
0x19    # $2 = 4
0xCE    # load sumS into $3
0x05
0x15
0x15
0x15    # $1 = 4
0xBD    # logic shift to the right by 4, Average seed
0x00
0xC4    # load address counter into $1
0x3D    # store Average seed into M[24]
############################################################## PART B
0x00    # point to first address
0x04    # sum = 0
0x38    # store sum into M[0]
0x09
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19	# numS = 16
0x11	# point to second address
0x38	# store numS into M[1]
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19
0x19	# $1 = 32
0x11	# point to third address
0x38	# store memory address counter of seed Hamming weights into M[2]
0x01
0x11
0x11
0x11
0x11
0x11
0x11
0x11	# point to 8th address
0x70	# store the next pc value into register uno
0xC4    # load seed in current mem address
0x08	# i = 0
0x71	# store the next pc value into register dos
0x84    # $1 value < 0?, $3 = 1:0
0x9D 	# if $3 == 0 branch to skip
0x19	# i++ when $1 is negative; Hamming weight of a seed
0xA5	# logic shift to the left once for every loop
0x65	# if $1 != 0 jump to register dos value → loop2
0x0D
0x1D
0xC7    # load mem. addr. ctr. of seed Hamming weights into $1
0x39	# store Hamming weight into M[$1]
0x15    # increment mem. addr. ctr. by 1
0x37	# store mem. addr. ctr. into M[2]
0x04	# point to the 1st memory address
0xCD    # load sum into $3
0x2E    # sum of 1’s in all 16 seeds, Total Hamming weight
0x3D	# store sum into M[0]
0x05	# point to the 2nd memory address
0xCD    # load numS into $3
0x1F    # decrement numS for each iteration by 1
0x3D	# store numS into M[1]
0x11    # increment address counter by 1
0x6C    # if $3 != 0 jump to register uno value → loop1
0x00
0xC8     # load sum into $2
0x05
0x15
0x15
0x15    # $1 = 4
0xB9    # logic shift to the right by 4, Average Hamming weight
0x01
0x11
0xC4    # load mem. addr. ctr. of seed Hamming weights into $1
0x39	# store AHW into address M[48]
0x9F 	#STOP
